const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const multer = require('multer');
const axios = require('axios');
const path = require('path');
const fs = require('fs');
const { HttpsProxyAgent } = require('https-proxy-agent');
const crypto = require('crypto');
const heicConvert = require('heic-convert');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 4001;

// Configura√ß√£o dos proxies HTTP
const PROXIES = [
    {
        host: 'server.sixproxy.com',
        port: 24654,
        auth: {
            username: '275a97be4dc7',
            password: '28c0f08822a6'
        }
    },
    {
        host: 'server.sixproxy.com',
        port: 24654,
        auth: {
            username: '4315b5249d9c',
            password: '20e07229f661'
        }
    },
    {
        host: 'server.sixproxy.com',
        port: 24654,
        auth: {
            username: '8e23eea78993',
            password: 'c24e7ff91b12'
        }
    }
];

// Configura√ß√£o da Evolution API
const EVOLUTION_CONFIG = {
    baseURL: 'https://evolutionapi.atendimento.info',
    instance: 'turbine',
    apiKey: process.env.EVOLUTION_API_KEY || '' // Adicionar suporte para API key se necess√°rio
};

// Fun√ß√£o para testar conectividade com Evolution API
async function testEvolutionAPI() {
    try {
        const response = await axios.get(`${EVOLUTION_CONFIG.baseURL}/instance/fetchInstances`, {
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                ...(EVOLUTION_CONFIG.apiKey && { 'apikey': EVOLUTION_CONFIG.apiKey })
            },
            timeout: 10000
        });
        
        return response.data;
    } catch (error) {
        console.error('‚ùå Erro ao acessar Evolution API:', error.message);
        if (error.response) {
            console.error('üìä Status:', error.response.status);
            console.error('üìÑ Dados:', error.response.data);
        }
        return null;
    }
}

// Estado dos proxies (para rota√ß√£o e controle de falhas)
let proxyIndex = 0;
let proxyFailures = new Map(); // Rastreia falhas por proxy

// Fun√ß√£o para obter o pr√≥ximo proxy dispon√≠vel
function getNextProxy() {
    const maxRetries = PROXIES.length;
    let attempts = 0;
    
    while (attempts < maxRetries) {
        const proxy = PROXIES[proxyIndex];
        const proxyKey = `${proxy.host}:${proxy.port}:${proxy.auth.username}`;
        
        // Verifica se o proxy n√£o teve muitas falhas recentes
        const failures = proxyFailures.get(proxyKey) || 0;
        if (failures < 3) {
            proxyIndex = (proxyIndex + 1) % PROXIES.length;
            return proxy;
        }
        
        proxyIndex = (proxyIndex + 1) % PROXIES.length;
        attempts++;
    }
    
    // Se todos os proxies falharam, reseta os contadores e tenta novamente
    proxyFailures.clear();
    return PROXIES[0];
}

// Fun√ß√£o para marcar falha de proxy
function markProxyFailure(proxy) {
    const proxyKey = `${proxy.host}:${proxy.port}:${proxy.auth.username}`;
    const currentFailures = proxyFailures.get(proxyKey) || 0;
    proxyFailures.set(proxyKey, currentFailures + 1);
    
    console.log(`‚ùå Proxy ${proxyKey} falhou. Total de falhas: ${currentFailures + 1}`);
}

// Fun√ß√£o para criar agente proxy
function createProxyAgent(proxy) {
    const proxyUrl = `http://${proxy.auth.username}:${proxy.auth.password}@${proxy.host}:${proxy.port}`;
    return new HttpsProxyAgent(proxyUrl);
}

// Fun√ß√£o para fazer requisi√ß√£o com redund√¢ncia de proxy
async function makeRequestWithProxy(config, maxRetries = 3) {
    let lastError;
    
    for (let attempt = 0; attempt < maxRetries; attempt++) {
        const proxy = getNextProxy();
        const proxyAgent = createProxyAgent(proxy);
        
        try {
            console.log(`üîÑ Tentativa ${attempt + 1} com proxy ${proxy.host}:${proxy.port}`);
            
            const response = await axios({
                ...config,
                httpsAgent: proxyAgent,
                timeout: 15000
            });
            
            console.log(`‚úÖ Sucesso com proxy ${proxy.host}:${proxy.port}`);
            return response;
            
        } catch (error) {
            console.log(`‚ùå Falha com proxy ${proxy.host}:${proxy.port}:`, error.message);
            markProxyFailure(proxy);
            lastError = error;
            
            // Se n√£o √© erro de rede, n√£o tenta outros proxies
            if (error.response && error.response.status < 500) {
                throw error;
            }
        }
    }
    
    throw lastError;
}

// Middleware de seguran√ßa
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com"],
            scriptSrc: ["'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com"],
            fontSrc: ["'self'", "https://cdnjs.cloudflare.com"],
            imgSrc: ["'self'", "data:", "blob:", "https:"],
            mediaSrc: ["'self'", "data:", "blob:", "https:"],
            connectSrc: ["'self'", "https://api.instagram.com", "https://graph.instagram.com", "https://api.openai.com", "https://api.openpix.com.br", "https://api.woovi-sandbox.com", "https://api.woovi.com"]
        }
    }
}));

// Middleware b√°sico
app.use(compression());
app.use(cors());
app.use(express.json({ limit: '500mb' }));
app.use(express.urlencoded({ extended: true, limit: '500mb' }));

// Middleware de log para todas as requisi√ß√µes
app.use((req, res, next) => {
    console.log(`üåê [REQUEST] ${req.method} ${req.url}`);
    console.log(`üìã [REQUEST] Headers:`, req.headers);
    if (req.body && Object.keys(req.body).length > 0) {
        console.log(`üì¶ [REQUEST] Body:`, req.body);
    }
    next();
});

// Servir arquivos est√°ticos
app.use(express.static(path.join(__dirname, 'public')));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Configura√ß√£o do multer para upload de arquivos
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = path.join(__dirname, 'uploads');
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({
    storage: storage,
    limits: {
        fileSize: 500 * 1024 * 1024 // 500MB para permitir v√≠deos grandes, valida√ß√£o espec√≠fica ser√° feita na rota
    },
    fileFilter: (req, file, cb) => {
        console.log('üîç Validando arquivo no servidor:', {
            originalname: file.originalname,
            mimetype: file.mimetype,
            fieldname: file.fieldname,
            size: file.size
        });
        
        // Obter extens√£o do arquivo
        const fileExtension = path.extname(file.originalname).toLowerCase();
        console.log('üìÅ Extens√£o do arquivo:', fileExtension);
        
        // Lista de extens√µes permitidas
        const imageExtensions = ['.jpeg', '.jpg', '.png', '.gif', '.heic', '.webp', '.dng'];
        const videoExtensions = ['.mp4', '.mov', '.avi', '.webm', '.3gp', '.mkv', '.ts'];
        const allowedExtensions = [...imageExtensions, ...videoExtensions];
        
        // Verificar se a extens√£o est√° na lista permitida
        const isAllowedExtension = allowedExtensions.includes(fileExtension);
        const isImage = imageExtensions.includes(fileExtension);
        const isVideo = videoExtensions.includes(fileExtension);
        
        console.log('üìä Resultados da valida√ß√£o:', {
            fileExtension,
            isAllowedExtension,
            isImage,
            isVideo,
            allowedExtensions
        });
        
        if (isAllowedExtension) {
            console.log('‚úÖ Arquivo aceito pela extens√£o');
            return cb(null, true);
        } else {
            console.log('‚ùå Arquivo rejeitado - extens√£o n√£o permitida');
            cb(new Error('Apenas imagens (JPEG, PNG, GIF, HEIC, WebP, DNG) e v√≠deos (MP4, MOV, AVI, WEBM, 3GP, MKV, TS) s√£o permitidos!'));
        }
    }
});

// Fun√ß√£o para baixar e salvar imagens de perfil localmente
async function downloadAndSaveProfileImage(imageUrl, phoneNumber) {
    try {
        // Baixando imagem de perfil
        
        // Criar diret√≥rio para fotos de perfil se n√£o existir
        const profilePicsDir = path.join(__dirname, 'uploads', 'profile-pics');
        if (!fs.existsSync(profilePicsDir)) {
            fs.mkdirSync(profilePicsDir, { recursive: true });
            // Diret√≥rio de fotos de perfil criado
        }
        
        // Gerar nome √∫nico para o arquivo baseado no n√∫mero de telefone
        const timestamp = Date.now();
        const fileName = `whatsapp_${phoneNumber}_${timestamp}.jpg`;
        const filePath = path.join(profilePicsDir, fileName);
        
        // Baixar a imagem
        const response = await axios({
            method: 'GET',
            url: imageUrl,
            responseType: 'stream',
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            },
            timeout: 15000
        });
        
        // Salvar a imagem no disco
        const writer = fs.createWriteStream(filePath);
        response.data.pipe(writer);
        
        return new Promise((resolve, reject) => {
            writer.on('finish', () => {
                // Retornar URL local para servir a imagem
                const localUrl = `/uploads/profile-pics/${fileName}`;
                resolve(localUrl);
            });
            
            writer.on('error', (error) => {
                reject(error);
            });
        });
        
    } catch (error) {
        throw error;
    }
}

// Sistema de rota√ß√£o de cookies e User-Agents para Instagram
const instagramCookies = [
    {
        sessionid: '75489726402%3ACUJhdJ38edxkRv%3A3%3AAYf_hsoLAWpupEVhvCQ_fjLSMQWh_mdLdOmudtO6hw',
        ds_user_id: '75489726402'
    },
    {
        sessionid: '54810149178%3A0hQvZt9j3tl8ZK%3A16%3AAYf3WuDYSdfocroW0rzUTm524GvuXpPBSaD8Ah32TQ',
        ds_user_id: '54810149178'
    },
    {
        sessionid: '67441971128%3A7bdCVxtkoZWrmb%3A26%3AAYfVQrA3L6qDzqkB4cOiPMU5UVB_eeEo-0m4Od_f2w',
        ds_user_id: '67441971128'
    },
    {
        sessionid: '58223294440%3AxqRau7fIa2iVfG%3A27%3AAYcknIRr4Th7ZmilnMFhEH44bHDfmIPcA3mSGToaFA',
        ds_user_id: '58223294440'
    },
    {
        sessionid: '58145436541%3AuGb60d7VPJnZ8n%3A17%3AAYf9C8VJO2mfZ0525pqCgOsFk4FFyvftezJE6boqBw',
        ds_user_id: '58145436541'
    }
];

const userAgents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
];

let currentCookieIndex = 0;
let currentUserAgentIndex = 0;

function getNextCookie() {
    const cookie = instagramCookies[currentCookieIndex];
    currentCookieIndex = (currentCookieIndex + 1) % instagramCookies.length;
    return cookie;
}

function getNextUserAgent() {
    const userAgent = userAgents[currentUserAgentIndex];
    currentUserAgentIndex = (currentUserAgentIndex + 1) % userAgents.length;
    return userAgent;
}

// API para valida√ß√£o de perfil do Instagram com proxies
app.post('/api/validate-instagram', async (req, res) => {
    try {
        const { username } = req.body;
        
        if (!username) {
            return res.status(400).json({ error: 'Nome de usu√°rio √© obrigat√≥rio' });
        }

        // Remove @ se presente
        const cleanUsername = username.replace('@', '');

        // Validando perfil Instagram
        
        // Obter cookie e user-agent para rota√ß√£o
        const cookie = getNextCookie();
        const userAgent = getNextUserAgent();
        
        // Rota√ß√£o de cookie
        // Rota√ß√£o de UserAgent
        
        // URL da API do Instagram
        const apiUrl = `https://www.instagram.com/api/v1/users/web_profile_info/?username=${cleanUsername}`;
        
        // Headers da requisi√ß√£o
        const headers = {
            'User-Agent': userAgent,
            'Cookie': `sessionid=${cookie.sessionid}; ds_user_id=${cookie.ds_user_id}`,
            'X-IG-App-ID': '936619743392459',
            'X-Requested-With': 'XMLHttpRequest',
            'Referer': `https://www.instagram.com/${cleanUsername}/`,
            'Origin': 'https://www.instagram.com',
            'Accept': '*/*',
            'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-origin'
        };
        
        const requestConfig = {
            method: 'GET',
            url: apiUrl,
            headers: headers,
            validateStatus: function (status) {
                return status < 500;
            }
        };
        
        const response = await makeRequestWithProxy(requestConfig);
        
        if (response.status === 200 && response.data && response.data.data && response.data.data.user) {
            const userData = response.data.data.user;
            
            const profileData = {
                username: userData.username,
                full_name: userData.full_name || '',
                profile_pic_url: userData.profile_pic_url || '',
                profile_pic_url_hd: userData.profile_pic_url_hd || userData.profile_pic_url || '',
                follower_count: userData.edge_followed_by?.count || 0,
                following_count: userData.edge_follow?.count || 0,
                is_private: userData.is_private || false,
                is_verified: userData.is_verified || false,
                biography: userData.biography || ''
            };
            
            // Perfil Instagram validado
            console.log('üñºÔ∏è URLs de imagem encontradas:', {
                normal: profileData.profile_pic_url ? 'Sim' : 'N√£o',
                hd: profileData.profile_pic_url_hd ? 'Sim' : 'N√£o',
                url_normal: profileData.profile_pic_url,
                url_hd: profileData.profile_pic_url_hd
            });
            
            res.json({
                success: true,
                data: {
                    user: profileData
                }
            });
        } else {
            if (response.status === 404) {
                // Usu√°rio n√£o encontrado
                return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
            } else if (response.status === 401 || response.status === 403) {
                // Erro de autentica√ß√£o
                return res.status(401).json({ error: 'Erro de autentica√ß√£o. Cookies podem estar expirados.' });
            } else {
                // Erro desconhecido
                return res.status(400).json({ error: 'Erro ao validar perfil' });
            }
        }
        
    } catch (error) {
        console.error('üí• Erro na valida√ß√£o Instagram:', error.message);
        res.status(500).json({ error: 'Erro interno do servidor', details: error.message });
    }
});

// API para validar perfil do WhatsApp usando Evolution API
app.post('/api/validate-whatsapp', async (req, res) => {
    try {
        const { phoneNumber } = req.body;
        
        if (!phoneNumber) {
            return res.status(400).json({ error: 'N√∫mero de telefone √© obrigat√≥rio' });
        }
        
        // Limpa o n√∫mero de telefone (remove caracteres especiais)
        const cleanPhoneNumber = phoneNumber.replace(/\D/g, '');
        
        // Adiciona c√≥digo do pa√≠s se n√£o estiver presente
        const formattedNumber = cleanPhoneNumber.startsWith('55') ? cleanPhoneNumber : `55${cleanPhoneNumber}`;
        

        
        // Usar o endpoint correto baseado na resposta de sucesso fornecida
        const profileConfig = {
            method: 'POST',
            url: `${EVOLUTION_CONFIG.baseURL}/chat/whatsappNumbers/${EVOLUTION_CONFIG.instance}`,
            data: {
                numbers: [formattedNumber]
            },
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'apikey': EVOLUTION_CONFIG.apiKey
            },
            timeout: 15000
        };
        

        
        const profileResponse = await axios(profileConfig);
        

        
        // Verificar se a resposta tem o formato esperado
        if (!profileResponse.data || !Array.isArray(profileResponse.data) || profileResponse.data.length === 0) {
            return res.status(404).json({ error: 'N√∫mero n√£o encontrado no WhatsApp' });
        }
        
        const numberData = profileResponse.data[0];
        
        // Verificar se o n√∫mero existe no WhatsApp
        if (!numberData.exists) {
            return res.status(404).json({ error: 'N√∫mero n√£o encontrado no WhatsApp' });
        }
        
        // Agora vamos buscar o perfil completo com a foto
        const profileUrl = `${EVOLUTION_CONFIG.baseURL}/chat/fetchProfile/${EVOLUTION_CONFIG.instance}`;
        const profileRequestData = {
            number: formattedNumber
        };
        

        
        const fullProfileResponse = await axios.post(profileUrl, profileRequestData, {
            headers: {
                'Content-Type': 'application/json',
                'apikey': EVOLUTION_CONFIG.apiKey
            },
            timeout: 15000
        });
        

        
        const userData = fullProfileResponse.data;
        
        // Extrair informa√ß√µes do perfil
        const wuid = userData.wuid || numberData.jid || `${formattedNumber}@s.whatsapp.net`;
        const originalProfilePicUrl = userData.profilePictureUrl || userData.picture || '';
        
        // Baixar e salvar a imagem localmente
        let profilePicUrl = '';
        if (originalProfilePicUrl) {
            try {
                profilePicUrl = await downloadAndSaveProfileImage(originalProfilePicUrl, formattedNumber);
            } catch (error) {
                // Fallback para o proxy se o download falhar
                profilePicUrl = `/api/proxy-image?url=${encodeURIComponent(originalProfilePicUrl)}`;
            }
        }
        

        
        const profileData = {
            phoneNumber: formattedNumber,
            exists: true,
            profileName: '',
            profilePicUrl: profilePicUrl,
            originalProfilePicUrl: originalProfilePicUrl,
            status: 'Perfil encontrado',
            wuid: wuid
        };
        

        
        res.json(profileData);
        
    } catch (error) {
        console.error('‚ùå Erro ao validar perfil WhatsApp:', error.message);
        
        if (error.response) {
            console.error('üìä Status da resposta:', error.response.status);
            console.error('üìã Dados da resposta:', JSON.stringify(error.response.data, null, 2));
            console.error('üîó URL da requisi√ß√£o:', error.config?.url);
            console.error('üì§ Dados enviados:', JSON.stringify(error.config?.data, null, 2));
            
            const status = error.response.status;
            if (status === 404) {
                res.status(404).json({ 
                    error: 'N√∫mero n√£o encontrado no WhatsApp',
                    details: 'O n√∫mero fornecido n√£o possui conta no WhatsApp'
                });
            } else if (status === 401) {
                res.status(401).json({ 
                    error: 'Erro de autentica√ß√£o com Evolution API',
                    details: 'Verifique se a API Key est√° correta'
                });
            } else if (status === 429) {
                res.status(429).json({ 
                    error: 'Muitas tentativas. Aguarde um momento.',
                    details: 'Limite de requisi√ß√µes da API atingido'
                });
            } else if (status === 500) {
                res.status(500).json({ 
                    error: 'Erro interno da Evolution API',
                    details: 'Problema no servidor da Evolution API'
                });
            } else {
                res.status(500).json({ 
                    error: 'Erro ao acessar Evolution API',
                    details: `Status HTTP: ${status}`
                });
            }
        } else if (error.code === 'ECONNREFUSED') {
            res.status(503).json({ 
                error: 'N√£o foi poss√≠vel conectar com a Evolution API',
                details: 'Verifique se a Evolution API est√° rodando'
            });
        } else if (error.code === 'ETIMEDOUT') {
            res.status(408).json({ 
                error: 'Timeout na requisi√ß√£o para Evolution API',
                details: 'A requisi√ß√£o demorou muito para responder'
            });
        } else {
            res.status(500).json({ 
                error: 'Erro de conex√£o com Evolution API',
                details: error.message
            });
        }
    }
});

// API para proxy de imagens (com logs detalhados)
// Proxy para imagens do WhatsApp (baixa e serve localmente)
app.get('/api/proxy-image', async (req, res) => {
    try {
        const { url } = req.query;
        
        if (!url) {
            return res.status(400).json({ error: 'URL da imagem √© obrigat√≥ria' });
        }
        
        // Baixando imagem do WhatsApp
        
        const response = await axios({
            method: 'GET',
            url: url,
            responseType: 'stream',
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            },
            timeout: 10000
        });
        

        
        // Definir headers apropriados
        res.setHeader('Content-Type', response.headers['content-type'] || 'image/jpeg');
        res.setHeader('Cache-Control', 'public, max-age=3600'); // Cache por 1 hora
        res.setHeader('Access-Control-Allow-Origin', '*');
        
        // Pipe da imagem para a resposta
        response.data.pipe(res);
        
    } catch (error) {
        
        if (error.code === 'ETIMEDOUT') {
            return res.status(408).json({ error: 'Timeout ao baixar imagem' });
        } else if (error.response && error.response.status === 404) {
            return res.status(404).json({ error: 'Imagem n√£o encontrada' });
        } else if (error.response && error.response.status === 403) {
            return res.status(403).json({ error: 'Acesso negado √† imagem' });
        }
        
        res.status(500).json({ error: 'Erro ao carregar imagem' });
    }
});

// Rota de teste para fetchProfile
app.post('/api/test-fetch-profile', async (req, res) => {
    const { number } = req.body;
    
    if (!number) {
        return res.status(400).json({ error: 'N√∫mero √© obrigat√≥rio' });
    }
    
    try {
        console.log('üîç Testando fetchProfile para:', number);
        
        const response = await axios.post(
            `${EVOLUTION_CONFIG.baseURL}/chat/fetchProfile/${EVOLUTION_CONFIG.instance}`,
            { number: number },
            {
                headers: {
                    'Content-Type': 'application/json',
                    'apikey': EVOLUTION_CONFIG.apiKey
                },
                timeout: 30000
            }
        );
        
        console.log('üìä Resposta do fetchProfile:', JSON.stringify(response.data, null, 2));
        res.json(response.data);
        
    } catch (error) {
        console.error('‚ùå Erro ao testar fetchProfile:', error.message);
        
        if (error.response) {
            console.error('üìä Status da resposta:', error.response.status);
            console.error('üìã Dados da resposta:', JSON.stringify(error.response.data, null, 2));
            res.status(error.response.status).json(error.response.data);
        } else {
            res.status(500).json({ error: 'Erro interno do servidor' });
        }
    }
});

// API para obter munic√≠pios
app.get('/api/municipios', (req, res) => {
    try {
        // Ler arquivo com tratamento de BOM
        let rawData = fs.readFileSync(path.join(__dirname, 'municipios.json'), 'utf8');
        
        // Remover BOM se existir
        if (rawData.charCodeAt(0) === 0xFEFF) {
            rawData = rawData.slice(1);
        }
        
        // Remover caracteres invis√≠veis do in√≠cio
        rawData = rawData.trim();
        
        const municipios = JSON.parse(rawData);
        res.json(municipios);
        
    } catch (error) {
        console.error('üí• Erro detalhado:', {
            message: error.message,
            stack: error.stack,
            name: error.name
        });
        res.status(500).json({ error: 'Erro ao carregar dados de munic√≠pios' });
    }
});

// Lista de termos inadequados e filtros
const TERMOS_BLOQUEADOS = {
    nomesProprios: [
        'pedro', 'marcos', 'jo√£o', 'maria', 'ana', 'carlos', 'jos√©', 'antonio', 'francisco',
        'paulo', 'adriana', 'juliana', 'fernando', 'ricardo', 'roberto', 'sandra', 'patricia',
        'daniel', 'rafael', 'lucas', 'gabriel', 'bruno', 'diego', 'felipe', 'gustavo',
        'leonardo', 'rodrigo', 'thiago', 'vinicius', 'andre', 'alexandre', 'eduardo',
        'marcelo', 'fabio', 'renato', 'sergio', 'claudio', 'mauricio', 'leandro'
    ],
    termosInadequados: [
        'teste', 'test', 'aaa', 'bbb', 'ccc', 'xxx', 'yyy', 'zzz', 'asdf', 'qwerty',
        '123', '456', '789', 'abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx',
        'random', 'aleatorio', 'qualquer', 'nada', 'vazio', 'indefinido'
    ],
    apostasECassinos: [
        'apostas', 'aposta', 'cassino', 'cassinos', 'casino', 'casinos', 'slots', 'slot',
        'slot machine', 'slot machines', 'maquina ca√ßa-niquel', 'maquinas ca√ßa-niquel',
        'jogo de azar', 'jogos de azar', 'poker', 'blackjack', 'roleta', 'bingo',
        'loteria', 'loterias', 'bet', 'betting', 'gambling', 'ca√ßa-niquel', 'ca√ßa-niqueis',
        'fortune tiger', 'tigrinho', 'mines', 'aviator', 'spaceman', 'crash',
        'blaze', 'betano', 'bet365', 'sportingbet', 'pixbet', 'betfair'
    ],
    conteudoAdulto: [
        'adulto', 'sexual', 'sexo', 'nude', 'nudez', 'nua', 'nu', 'pelada', 'pelado',
        'encontros', 'encontro', 'acompanhante', 'acompanhantes', 'escort', 'escorts',
        'massagem tantrica', 'massagem erotica', 'strip', 'stripper', 'cam girl',
        'camgirl', 'webcam', 'onlyfans', 'privacy', 'hot', 'sensual', 'erotico',
        'erotica', 'pornografia', 'porno', 'xxx', 'swing', 'fetiche', 'bdsm',
        'dominatrix', 'prostituta', 'prostituto', 'garota de programa', 'mich√™',
        'nicho hot', 'produtora de conteudo +18', 'conteudo +18', '+18'
    ],
    satanismo: [
        'satanismo', 'satanista', 'sat√£', 'satan', 'satanas', 'diabo', 'demonio',
        'dem√¥nio', 'lucifer', 'belzebu', 'baphomet', 'anticristo', 'anti-cristo',
        'ocultismo', 'ocultista', 'magia negra', 'ritual sat√¢nico', 'ritual satanico',
        'invoca√ß√£o demon√≠aca', 'invocacao demoniaca', 'pentagrama invertido',
        'cruz invertida', 'missa negra', 'culto sat√¢nico', 'culto satanico',
        'adora√ß√£o ao diabo', 'adoracao ao diabo', 'pacto com o diabo',
        'possess√£o demon√≠aca', 'possessao demoniaca', 'exorcismo', 'dem√¥nios',
        'demonios', 'entidades malignas', 'for√ßas das trevas', 'forcas das trevas',
        'bruxaria', 'feiti√ßaria', 'feiticaria', 'necromancia', 'voodoo', 'vudu',
        'capeta', 'adora√ß√£o ao capeta', 'adoracao ao capeta'
    ],
    palavrasVazias: [
        'a', 'o', 'e', 'de', 'da', 'do', 'em', 'um', 'uma', 'para', 'com', 'por',
        'na', 'no', 'ao', 'dos', 'das', 'se', 'que', 'ou', 'mas', 'como', 'quando'
    ]
};

// Fun√ß√£o para extrair nicho principal de descri√ß√µes longas
function extrairNichoPrincipal(texto) {
    if (!texto || typeof texto !== 'string') {
        return texto;
    }
    
    // Normalizar texto
    const textoLimpo = texto.toLowerCase().trim();
    
    // Palavras-chave que indicam profiss√µes/nichos
    const indicadoresProfissao = [
        'sou', 'trabalho como', 'atuo como', 'profissional de', 'especialista em',
        'consultor', 'terapeuta', 'psic√≥logo', 'psicanalista', 'nutricionista',
        'personal trainer', 'coach', 'advogado', 'm√©dico', 'dentista',
        'arquiteto', 'designer', 'desenvolvedor', 'programador', 'engenheiro'
    ];
    
    // Palavras-chave que indicam √°reas de interesse/mercado
    const indicadoresArea = [
        'interessadas em', 'interessados em', 'que precisam de', 'que querem',
        'sess√µes de', 'consultas de', 'servi√ßos de', 'produtos de',
        'relacionado a', '√°rea de', 'mercado de', 'nicho de'
    ];
    
    // Mapeamento de profiss√µes para nichos
    const mapeamentoProfissoes = {
        'psicanalista': 'psican√°lise',
        'psicologo': 'psicologia',
        'nutricionista': 'nutri√ß√£o',
        'personal trainer': 'fitness',
        'personal': 'fitness',
        'trainer': 'fitness',
        'coach': 'coaching',
        'advogado': 'direito',
        'medico': 'medicina',
        'dentista': 'odontologia',
        'arquiteto': 'arquitetura',
        'designer': 'design',
        'desenvolvedor': 'tecnologia',
        'programador': 'tecnologia',
        'engenheiro': 'engenharia',
        'terapeuta': 'terapia',
        'consultor': 'consultoria'
    };
    
    // Tentar extrair nicho baseado em profiss√£o mencionada
    for (const [profissao, nicho] of Object.entries(mapeamentoProfissoes)) {
        if (textoLimpo.includes(profissao)) {
            return nicho;
        }
    }
    
    // Tentar extrair nicho ap√≥s indicadores de √°rea
    for (const indicador of indicadoresArea) {
        const index = textoLimpo.indexOf(indicador);
        if (index !== -1) {
            const aposIndicador = textoLimpo.substring(index + indicador.length).trim();
            const palavras = aposIndicador.split(/\s+/);
            
            // Pegar as primeiras 1-3 palavras ap√≥s o indicador
            const nicho = palavras.slice(0, 3).join(' ')
                .replace(/[^a-z√°√†√¢√£√§√©√®√™√´√≠√¨√Æ√Ø√≥√≤√¥√µ√∂√∫√π√ª√º√ß√±\s-]/gi, '')
                .trim();
            
            if (nicho && nicho.length >= 3) {
                return nicho;
            }
        }
    }
    
    // Se n√£o encontrou nada espec√≠fico, verificar se o texto j√° √© um nicho espec√≠fico
    // Para textos como "Venda no atacado para lojas infantil", manter o texto completo
    const palavras = textoLimpo.split(/\s+/);
    
    // Se o texto tem palavras espec√≠ficas de segmento/produto, manter o texto completo
    const palavrasEspecificas = ['infantil', 'fitness', 'fit', 'beleza', 'sa√∫de', 'tecnologia', 'educa√ß√£o', 
                                'culin√°ria', 'moda', 'esporte', 'm√∫sica', 'arte', 'decora√ß√£o',
                                'autom√≥vel', 'im√≥vel', 'pet', 'viagem', 'fotografia', 'design',
                                'roupas', 'roupa', 'conte√∫do', 'conteudo', 'criador', 'loja', 'lojas'];
    
    const temPalavraEspecifica = palavras.some(palavra => 
        palavrasEspecificas.includes(palavra) || 
        palavra.endsWith('ista') || 
        palavra.endsWith('√ß√£o') ||
        palavra.endsWith('ria')
    );
    
    // Se tem palavra espec√≠fica de segmento, manter o texto completo
    if (temPalavraEspecifica) {
        return texto;
    }
    
    // Caso contr√°rio, tentar extrair palavras-chave relevantes
    const palavrasRelevantes = palavras
        .filter(palavra => 
            palavra.length >= 4 && 
            !['sou', 'preciso', 'pessoas', 'interessadas', 'fazer', 'sess√µes', 
             'consultas', 'servi√ßos', 'produtos', 'trabalho', 'como', 'que', 
             'para', 'com', 'uma', 'dos', 'das', 'este', 'esta', 'venda', 'vendas'].includes(palavra)
        );
    
    // Se encontrou palavras relevantes, retornar as principais (m√°ximo 3)
    if (palavrasRelevantes.length > 0) {
        return palavrasRelevantes.slice(0, 3).join(' ');
    }
    
    // Se nada foi encontrado, retornar o texto original
    return texto;
}

// Fun√ß√£o para validar se o termo √© um nicho v√°lido
function validarNicho(nicho) {
    if (!nicho || typeof nicho !== 'string') {
        return { valido: false, motivo: 'Termo inv√°lido' };
    }
    
    // Normalizar caracteres Unicode e remover acentos para valida√ß√£o
    const nichoLimpo = nicho.toLowerCase()
        .trim()
        .replace(/[√°√†√¢√£√§√©√®√™√´√≠√¨√Æ√Ø√≥√≤√¥√µ√∂√∫√π√ª√º√ß√±]/g, function(match) {
            const map = {
                '√°':'a','√†':'a','√¢':'a','√£':'a','√§':'a',
                '√©':'e','√®':'e','√™':'e','√´':'e',
                '√≠':'i','√¨':'i','√Æ':'i','√Ø':'i',
                '√≥':'o','√≤':'o','√¥':'o','√µ':'o','√∂':'o',
                '√∫':'u','√π':'u','√ª':'u','√º':'u',
                '√ß':'c','√±':'n'
            };
            return map[match] || match;
        });
    
    // Verificar se √© muito curto
    if (nichoLimpo.length < 3) {
        return { valido: false, motivo: 'Termo muito curto. Use pelo menos 3 caracteres.' };
    }
    
    // Verificar se √© muito longo
    if (nichoLimpo.length > 80) {
        return { valido: false, motivo: 'Termo muito longo. Use no m√°ximo 80 caracteres.' };
    }
    
    // Verificar se cont√©m apenas n√∫meros
    if (/^\d+$/.test(nichoLimpo)) {
        return { valido: false, motivo: 'Use palavras, n√£o apenas n√∫meros.' };
    }
    
    // Verificar se cont√©m caracteres especiais (agora sem acentos)
    if (/[^a-zA-Z\s-,]/g.test(nichoLimpo)) {
        return { valido: false, motivo: 'Use apenas letras, espa√ßos, h√≠fens e v√≠rgulas.' };
    }
    
    // Verificar nomes pr√≥prios
    if (TERMOS_BLOQUEADOS.nomesProprios.includes(nichoLimpo)) {
        return { valido: false, motivo: 'Por favor, digite um nicho de mercado, n√£o um nome pr√≥prio.' };
    }
    
    // Verificar termos inadequados
    if (TERMOS_BLOQUEADOS.termosInadequados.includes(nichoLimpo)) {
        return { valido: false, motivo: 'Digite um nicho de mercado v√°lido (ex: "Fitness", "Culin√°ria", "Tecnologia").' };
    }
    
    // Verificar apostas e cassinos
    const palavrasNicho = nichoLimpo.split(/\s+/);
    const contemApostasOuCassinos = TERMOS_BLOQUEADOS.apostasECassinos.some(termo => 
        palavrasNicho.includes(termo)
    );
    if (contemApostasOuCassinos) {
        return { valido: false, motivo: 'conteudo_inadequado' };
    }
    
    // Verificar conte√∫do adulto/sexual
    const contemConteudoAdulto = TERMOS_BLOQUEADOS.conteudoAdulto.some(termo => 
        palavrasNicho.includes(termo)
    );
    if (contemConteudoAdulto) {
        return { valido: false, motivo: 'conteudo_inadequado' };
    }
    
    // Verificar conte√∫do relacionado ao satanismo
    const contemSatanismo = TERMOS_BLOQUEADOS.satanismo.some(termo => 
        palavrasNicho.includes(termo)
    );
    if (contemSatanismo) {
        return { valido: false, motivo: 'conteudo_inadequado' };
    }
    
    // Verificar palavras vazias
    if (TERMOS_BLOQUEADOS.palavrasVazias.includes(nichoLimpo)) {
        return { valido: false, motivo: 'Digite um nicho de mercado espec√≠fico.' };
    }
    
    // Verificar se cont√©m pelo menos uma palavra significativa
    const palavras = nichoLimpo.split(/\s+/).filter(p => p.length > 2);
    if (palavras.length === 0) {
        return { valido: false, motivo: 'Digite um nicho de mercado com palavras significativas.' };
    }
    
    return { valido: true };
}

// API para buscar mercados semelhantes usando OpenAI
app.post('/api/buscar-mercado', async (req, res) => {
    try {
        let { nicho } = req.body;
        
        // Normalizar entrada para lidar com problemas de codifica√ß√£o
        if (nicho && typeof nicho === 'string') {
            // Corrigir caracteres corrompidos comuns
            nicho = nicho
                .replace(/psicanÔøΩlise/gi, 'psican√°lise')
                .replace(/ÔøΩ/g, '√°') // Corrigir caractere corrompido comum
                .normalize('NFC'); // Normalizar para forma composta
        }
        
        console.log('üîç Requisi√ß√£o para buscar mercado:', { nicho });
        console.log('üîë Chave da API carregada:', process.env.OPENAI_API_KEY ? 'Sim (primeiros 10 chars: ' + process.env.OPENAI_API_KEY.substring(0, 10) + '...)' : 'N√£o');
        
        if (!nicho) {
            return res.status(400).json({ error: 'Nicho √© obrigat√≥rio' });
        }
        
        // PRIMEIRO: Validar o texto original antes de extrair o nicho
        const validacaoOriginal = validarNicho(nicho);
        if (!validacaoOriginal.valido) {
            console.log('‚ùå Nicho inv√°lido (texto original):', validacaoOriginal.motivo);
            
            // Se for conte√∫do inadequado, retornar erro espec√≠fico
            if (validacaoOriginal.motivo === 'conteudo_inadequado') {
                return res.status(400).json({ 
                    error: 'conteudo_inadequado',
                    message: 'O termo pesquisado cont√©m palavras ofensivas ou inadequadas.'
                });
            }
            
            return res.status(400).json({ 
                error: validacaoOriginal.motivo,
                sugestao: 'Tente termos como: "Fitness", "Culin√°ria", "Tecnologia", "Educa√ß√£o", "Sa√∫de", "Beleza", etc.'
            });
        }
        
        // SEGUNDO: Manter o texto original para enviar ao ChatGPT (n√£o extrair)
        const nichoOriginal = nicho;
        // Comentado: nicho = extrairNichoPrincipal(nicho);
        // Agora enviamos o texto completo para o ChatGPT analisar
        
        console.log('üîç Enviando texto completo para ChatGPT:', { original: nichoOriginal });
        
        // TERCEIRO: Validar o nicho extra√≠do (valida√ß√£o adicional)
        const validacao = validarNicho(nicho);
        if (!validacao.valido) {
            console.log('‚ùå Nicho inv√°lido:', validacao.motivo);
            
            // Se for conte√∫do inadequado, retornar erro espec√≠fico
            if (validacao.motivo === 'conteudo_inadequado') {
                return res.status(400).json({ 
                    error: 'conteudo_inadequado',
                    message: 'O termo pesquisado cont√©m palavras ofensivas ou inadequadas.'
                });
            }
            
            return res.status(400).json({ 
                error: validacao.motivo,
                sugestao: 'Tente termos como: "Fitness", "Culin√°ria", "Tecnologia", "Educa√ß√£o", "Sa√∫de", "Beleza", etc.'
            });
        }
        
        if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'sua_chave_openai_aqui') {
            console.log('‚ùå Chave da API n√£o configurada');
            return res.status(401).json({ error: 'Chave da API OpenAI n√£o configurada' });
        }
        
        // Valida√ß√£o adicional de contexto usando ChatGPT
        const validacaoPrompt = `Analise se "${nicho}" representa um nicho de mercado, profiss√£o, √°rea de interesse ou segmento v√°lido para campanhas publicit√°rias.

O texto pode ser:
1. Um nicho direto (ex: "Fitness", "Culin√°ria")
2. Uma descri√ß√£o completa (ex: "Sou psicanalista, preciso de pessoas interessadas em psican√°lise")
3. Uma profiss√£o ou √°rea de atua√ß√£o

RESPONDA APENAS "SIM" ou "N√ÉO".

Exemplos de respostas:
- "Fitness" ‚Üí SIM
- "Sou nutricionista e trabalho com emagrecimento" ‚Üí SIM
- "Preciso de clientes para minha cl√≠nica de fisioterapia" ‚Üí SIM
- "Pedro" ‚Üí N√ÉO
- "Marcos" ‚Üí N√ÉO
- "teste" ‚Üí N√ÉO
- "asdfgh" ‚Üí N√ÉO

Se o texto menciona uma profiss√£o leg√≠tima, √°rea de neg√≥cio ou interesse comercial v√°lido, responda SIM.`;
        
        console.log('üîç Validando contexto do nicho com ChatGPT...');
        
        const validacaoResponse = await axios.post('https://api.openai.com/v1/chat/completions', {
            model: 'gpt-3.5-turbo',
            messages: [{
                role: 'user',
                content: validacaoPrompt
            }],
            max_tokens: 10,
            temperature: 0.1
        }, {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
            },
            timeout: 15000
        });
        
        const validacaoResposta = validacaoResponse.data.choices[0].message.content.trim().toUpperCase();
        console.log('ü§ñ Valida√ß√£o ChatGPT:', validacaoResposta);
        
        if (validacaoResposta !== 'SIM') {
            console.log('‚ùå Nicho rejeitado pelo ChatGPT');
            return res.status(400).json({ 
                error: 'Este termo n√£o parece ser um nicho de mercado v√°lido.',
                sugestao: 'Tente termos relacionados a profiss√µes, hobbies, interesses ou √°reas de neg√≥cio (ex: "Fitness", "Culin√°ria", "Tecnologia", "Educa√ß√£o").'
            });
        }
        
        console.log('‚úÖ Nicho validado, buscando mercados semelhantes...');
        
        const prompt = `IMPORTANTE: Voc√™ est√° analisando o seguinte texto relacionado a um nicho de mercado para campanhas publicit√°rias: "${nicho}"

Este texto pode ser:
1. Um nicho direto (ex: "Fitness", "Culin√°ria")
2. Uma descri√ß√£o completa (ex: "Sou psicanalista, preciso de pessoas interessadas em psican√°lise")
3. Uma profiss√£o ou √°rea de atua√ß√£o

Sua tarefa: Analise o CONTEXTO COMPLETO do texto para identificar o nicho espec√≠fico. NUNCA extraia apenas uma palavra isolada. Considere TODAS as palavras e o significado conjunto para identificar o segmento espec√≠fico.

PROCESSO DE AN√ÅLISE:
1. Leia TODA a frase/texto
2. Identifique o TEMA PRINCIPAL considerando todas as palavras
3. Ignore palavras gen√©ricas como "venda", "servi√ßo", "consultoria" se houver especifica√ß√£o
4. Foque no PRODUTO/√ÅREA/SEGMENTO espec√≠fico mencionado

Exemplos de an√°lise correta:
- "Venda no atacado para lojas infantil" ‚Üí ANALISE: venda (gen√©rico) + atacado (modalidade) + lojas infantil (segmento espec√≠fico) ‚Üí NICHO: "Produtos Infantis" (foco no segmento espec√≠fico)
- "Servi√ßos de fisioterapia" ‚Üí ANALISE: servi√ßos (gen√©rico) + fisioterapia (√°rea espec√≠fica) ‚Üí NICHO: "Fisioterapia" (foco na √°rea espec√≠fica)
- "Consultoria em marketing digital" ‚Üí ANALISE: consultoria (gen√©rico) + marketing digital (√°rea espec√≠fica) ‚Üí NICHO: "Marketing Digital" (foco na √°rea espec√≠fica)
- "Instala√ß√£o de banheiras e spas" ‚Üí ANALISE: instala√ß√£o (gen√©rico) + banheiras e spas (produtos espec√≠ficos) ‚Üí NICHO: "Hidromassagem/Relaxamento" (foco nos produtos espec√≠ficos)

Ap√≥s identificar o nicho espec√≠fico, sugira 3 mercados ou segmentos que tenham LIGA√á√ÉO DIRETA E ESPEC√çFICA com esse nicho.

CR√çTICO: Os mercados sugeridos devem ser DIRETAMENTE LIGADOS ao nicho espec√≠fico identificado, n√£o apenas "relacionados". Evite completamente sugest√µes gen√©ricas ou distantes.

Para cada mercado, forne√ßa:
1. Nome do mercado (OBRIGAT√ìRIO: use apenas 1 PALAVRA SIMPLES)
2. Breve descri√ß√£o (1-2 frases) explicando a LIGA√á√ÉO DIRETA com o nicho identificado

REGRAS IMPORTANTES para o nome:
- Use APENAS 1 PALAVRA
- Deve ter LIGA√á√ÉO DIRETA com o nicho espec√≠fico
- N√ÉO use termos gen√©ricos como "Educa√ß√£o", "Consultoria", "Treinamento", "Im√≥veis", "Autom√≥veis"
- Deve ser um MERCADO/SEGMENTO dentro da mesma √°rea ou muito pr√≥ximo

REGRA CR√çTICA: Os mercados sugeridos devem ser PRODUTOS/SERVI√áOS ESPEC√çFICOS do mesmo segmento, NUNCA setores gen√©ricos.

Exemplos CORRETOS (liga√ß√£o direta):
- Para "Venda no atacado para lojas infantil": identifique "Produtos Infantis" ‚Üí sugira "Brinquedos", "Roupas", "Cal√ßados" (todos produtos infantis espec√≠ficos)
- Para "Professor de artes marciais": identifique "Artes Marciais" ‚Üí sugira "Lutas", "Defesa", "Kimono"
- Para "Produtor de m√∫sica rap": identifique "Rap/Hip-Hop" ‚Üí sugira "Hip-Hop", "Beatmaking", "Freestyle"
- Para "Nutricionista": identifique "Nutri√ß√£o" ‚Üí sugira "Suplementos", "Emagrecimento", "Dietas"
- Para "Instala√ß√£o de banheiras e spas": identifique "Hidromassagem" ‚Üí sugira "Piscinas", "Saunas", "Relaxamento"

Exemplos TOTALMENTE PROIBIDOS (sem liga√ß√£o direta):
- Para "Venda no atacado infantil" ‚Üí "Im√≥veis" ‚ùå (setor completamente diferente)
- Para "Venda no atacado infantil" ‚Üí "Autom√≥veis" ‚ùå (setor completamente diferente)
- Para "Venda no atacado infantil" ‚Üí "Decora√ß√£o" ‚ùå (setor completamente diferente)
- Para "Venda no atacado infantil" ‚Üí "Corretagem" ‚ùå (setor completamente diferente)
- Para "Venda no atacado infantil" ‚Üí "Eletrodom√©sticos" ‚ùå (setor completamente diferente)
- Para qualquer nicho ‚Üí "Educa√ß√£o" ‚ùå (muito gen√©rico)
- Para qualquer nicho ‚Üí "Consultoria" ‚ùå (muito gen√©rico)

IMPORTANTE: Se o nicho menciona "infantil", TODOS os mercados sugeridos devem ser relacionados a crian√ßas/beb√™s. Se menciona "fitness", TODOS devem ser relacionados a exerc√≠cios/sa√∫de. NUNCA misture setores diferentes.

Formato da resposta em JSON:
{
  "mercados": [
    {
      "nome": "UmaPalavra",
      "descricao": "Descri√ß√£o espec√≠fica do mercado e sua LIGA√á√ÉO DIRETA com o nicho identificado"
    }
  ]
}

Responda apenas com o JSON, sem texto adicional.`;
        
        const response = await axios.post('https://api.openai.com/v1/chat/completions', {
            model: 'gpt-3.5-turbo',
            messages: [
                {
                    role: 'user',
                    content: prompt
                }
            ],
            max_tokens: 500,
            temperature: 0.7
        }, {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
            },
            timeout: 30000
        });
        
        if (!response.data.choices || !response.data.choices[0] || !response.data.choices[0].message) {
            throw new Error('Resposta da API em formato inv√°lido');
        }
        
        const content = response.data.choices[0].message.content.trim();
        
        try {
            const parsedContent = JSON.parse(content);
            
            if (!parsedContent.mercados || !Array.isArray(parsedContent.mercados)) {
                throw new Error('Formato de mercados inv√°lido');
            }
            
            const mercadosValidos = parsedContent.mercados.filter(mercado => 
                mercado && 
                typeof mercado.nome === 'string' && 
                typeof mercado.descricao === 'string' &&
                mercado.nome.trim() && 
                mercado.descricao.trim()
            );
            
            if (mercadosValidos.length === 0) {
                throw new Error('Nenhum mercado v√°lido encontrado');
            }
            
            res.json({ mercados: mercadosValidos });
            
        } catch (parseError) {
            console.error('Erro ao fazer parse da resposta:', parseError);
            console.log('Resposta recebida:', content);
            res.status(500).json({ error: 'Formato de resposta inv√°lido' });
        }
        
    } catch (error) {
        console.error('Erro ao buscar mercados:', error.message);
        
        if (error.response) {
            const status = error.response.status;
            if (status === 401) {
                res.status(401).json({ error: 'Erro de autentica√ß√£o. Verifique a chave da API.' });
            } else if (status === 429) {
                res.status(429).json({ error: 'Muitas solicita√ß√µes. Aguarde um momento e tente novamente.' });
            } else if (status >= 500) {
                res.status(500).json({ error: 'Erro no servidor da OpenAI. Tente novamente em alguns minutos.' });
            } else {
                res.status(400).json({ error: 'Erro na requisi√ß√£o √† OpenAI.' });
            }
        } else if (error.code === 'ECONNABORTED') {
            res.status(408).json({ error: 'Timeout: A requisi√ß√£o demorou muito para responder.' });
        } else {
            res.status(500).json({ error: 'Erro interno do servidor.' });
        }
    }
});

// API para criar campanha
app.post('/api/campaign', (req, res) => {
    try {
        const campaignData = req.body;
        
        // Valida√ß√µes b√°sicas
        if (!campaignData.objective) {
            return res.status(400).json({ error: 'Objetivo da campanha √© obrigat√≥rio' });
        }
        
        if (!campaignData.direction) {
            return res.status(400).json({ error: 'Direcionamento √© obrigat√≥rio' });
        }

        // Aqui voc√™ pode salvar os dados da campanha no banco de dados
        // Por enquanto, apenas retornamos sucesso
        
        console.log('Nova campanha criada:', campaignData);
        
        res.json({
            success: true,
            message: 'Campanha criada com sucesso!',
            campaignId: Date.now().toString()
        });
    } catch (error) {
        console.error('Erro ao criar campanha:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Middleware de tratamento de erros
app.use((error, req, res, next) => {
    if (error instanceof multer.MulterError) {
        if (error.code === 'LIMIT_FILE_SIZE') {
            return res.status(400).json({ error: 'Arquivo muito grande. M√°ximo 500MB permitido.' });
        }
    }
    
    console.error('Erro:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
});

// ===== ROTAS DA API =====

// Rota para upload de arquivos com convers√£o HEIC
app.post('/api/upload', upload.array('files', 10), async (req, res) => {
    try {
        console.log('üì§ [UPLOAD] Recebendo arquivos para upload...');
        
        if (!req.files || req.files.length === 0) {
            return res.status(400).json({ error: 'Nenhum arquivo enviado' });
        }
        
        const processedFiles = [];
        
        for (const file of req.files) {
            console.log(`üìÑ [UPLOAD] Processando arquivo: ${file.originalname}`);
            console.log(`üìä [UPLOAD] Tipo MIME: ${file.mimetype}`);
            console.log(`üìè [UPLOAD] Tamanho: ${file.size} bytes`);
            
            // Valida√ß√£o espec√≠fica de tamanho por tipo de arquivo
            const fileExtension = path.extname(file.originalname).toLowerCase();
            const imageExtensions = ['.jpeg', '.jpg', '.png', '.gif', '.heic', '.webp', '.dng'];
            const videoExtensions = ['.mp4', '.mov', '.avi', '.webm', '.3gp', '.mkv', '.ts'];
            
            const isImage = imageExtensions.includes(fileExtension);
            const isVideo = videoExtensions.includes(fileExtension);
            
            // Verificar limites espec√≠ficos
            if (isImage && file.size > 10 * 1024 * 1024) { // 10MB para imagens
                return res.status(400).json({ error: 'Imagem muito grande. M√°ximo 10MB para imagens.' });
            }
            
            if (isVideo && file.size > 500 * 1024 * 1024) { // 500MB para v√≠deos
                return res.status(400).json({ error: 'V√≠deo muito grande. M√°ximo 500MB para v√≠deos.' });
            }
            
            let processedFile = {
                originalName: file.originalname,
                filename: file.filename,
                path: file.path,
                size: file.size,
                mimetype: file.mimetype,
                url: `/uploads/${file.filename}`
            };
            
            // Verificar se √© arquivo HEIC e converter para JPG
            const isHEIC = file.originalname.toLowerCase().endsWith('.heic') || 
                          file.originalname.toLowerCase().endsWith('.heif');
            
            if (isHEIC) {
                try {
                    console.log('üîÑ [HEIC] Iniciando convers√£o HEIC para JPG...');
                    
                    // Ler o arquivo HEIC
                    const inputBuffer = await fs.promises.readFile(file.path);
                    console.log(`üìñ [HEIC] Arquivo HEIC lido: ${inputBuffer.length} bytes`);
                    
                    // Converter para JPG
                    const outputBuffer = await heicConvert({
                        buffer: inputBuffer,
                        format: 'JPEG',
                        quality: 0.9
                    });
                    console.log(`‚úÖ [HEIC] Convers√£o conclu√≠da: ${outputBuffer.length} bytes`);
                    
                    // Gerar novo nome de arquivo JPG
                    const jpgFilename = file.filename.replace(/\.[^.]+$/, '.jpg');
                    const jpgPath = path.join(path.dirname(file.path), jpgFilename);
                    
                    // Salvar arquivo JPG convertido
                    await fs.promises.writeFile(jpgPath, outputBuffer);
                    console.log(`üíæ [HEIC] Arquivo JPG salvo: ${jpgPath}`);
                    
                    // Remover arquivo HEIC original
                    await fs.promises.unlink(file.path);
                    console.log(`üóëÔ∏è [HEIC] Arquivo HEIC original removido`);
                    
                    // Atualizar informa√ß√µes do arquivo processado
                    processedFile.filename = jpgFilename;
                    processedFile.path = jpgPath;
                    processedFile.mimetype = 'image/jpeg';
                    processedFile.url = `/uploads/${jpgFilename}`;
                    processedFile.converted = true;
                    processedFile.originalFormat = 'HEIC';
                    
                } catch (conversionError) {
                    console.error('‚ùå [HEIC] Erro na convers√£o:', conversionError);
                    // Em caso de erro, manter arquivo original
                    processedFile.conversionError = conversionError.message;
                }
            }
            
            processedFiles.push(processedFile);
        }
        
        console.log(`‚úÖ [UPLOAD] ${processedFiles.length} arquivo(s) processado(s) com sucesso`);
        
        res.json({
            success: true,
            message: 'Arquivos enviados com sucesso',
            files: processedFiles
        });
        
    } catch (error) {
        console.error('‚ùå [UPLOAD] Erro no upload:', error);
        res.status(500).json({ 
            error: 'Erro interno do servidor',
            details: error.message 
        });
    }
});

// Rota para criar cobran√ßa PIX
app.post('/api/create-pix-charge', async (req, res) => {
    try {
        console.log('\n=== üéØ [ROUTE] REQUISI√á√ÉO PIX RECEBIDA ===');
        console.log('üì¶ [ROUTE] Body da requisi√ß√£o:', JSON.stringify(req.body, null, 2));
        console.log('üìã [ROUTE] Headers da requisi√ß√£o:', JSON.stringify(req.headers, null, 2));
        console.log('‚è∞ [ROUTE] Timestamp:', new Date().toISOString());
        console.log('===========================================\n');
        
        const { 
            value, 
            days, 
            expiresIn,
            campaignType, 
            comment,
            customerName,
            customerPhone,
            customerEmail,
            customerTaxID,
            additionalInfo,
            correlationID,
            useSandbox
        } = req.body;
        
        // Usar expiresIn se fornecido, sen√£o usar days
        const expiration = expiresIn || (days ? days * 24 * 60 * 60 : null);
        
        console.log('üîç [ROUTE] Dados extra√≠dos:');
        console.log('üí∞ [ROUTE] Value:', value);
        console.log('üìÖ [ROUTE] Days:', days);
        console.log('‚è∞ [ROUTE] ExpiresIn:', expiresIn);
        console.log('‚è±Ô∏è [ROUTE] Expiration (seconds):', expiration);
        console.log('üÜî [ROUTE] Correlation ID:', correlationID);
        console.log('üè∑Ô∏è [ROUTE] Campaign Type:', campaignType);
        console.log('üí¨ [ROUTE] Comment:', comment);
        console.log('üë§ [ROUTE] Customer Name:', customerName);
        console.log('üì± [ROUTE] Customer Phone:', customerPhone);
        console.log('üìß [ROUTE] Customer Email:', customerEmail);
        console.log('üÜî [ROUTE] Customer Tax ID:', customerTaxID);
        console.log('üìã [ROUTE] Additional Info:', additionalInfo);
        
        if (!value || !expiration) {
            console.log('‚ùå [ROUTE] Valida√ß√£o falhou: valor ou dura√ß√£o ausentes');
            return res.status(400).json({
                success: false,
                error: 'Valor e dura√ß√£o s√£o obrigat√≥rios'
            });
        }
        
        console.log('‚úÖ [ROUTE] Valida√ß√£o passou, chamando createPixCharge...');
        
        const pixData = await createPixCharge({
            value,
            expiresIn: expiration,
            correlationID,
            campaignType,
            comment,
            customerName,
            customerPhone,
            customerEmail,
            customerTaxID,
            additionalInfo,
            useSandbox
        });
        
        console.log('üéâ [ROUTE] PIX criado com sucesso!');
        console.log('üìã [ROUTE] Dados do PIX:', JSON.stringify(pixData, null, 2));
        
        res.json({
            success: true,
            data: pixData
        });
        
    } catch (error) {
        console.error('‚ùå [ROUTE] Erro ao criar PIX:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// ===== WOOVI/OPENPIX INTEGRATION =====

// Configura√ß√£o da Woovi
const WOOVI_CONFIG = {
    baseURL: process.env.WOOVI_BASE_URL || 'https://api.woovi.com',
    sandboxURL: process.env.WOOVI_SANDBOX_URL || 'https://api.woovi-sandbox.com',
    appId: process.env.WOOVI_APP_ID,
    sandboxAppId: process.env.WOOVI_SANDBOX_APP_ID,
    webhookSecret: process.env.WOOVI_WEBHOOK_SECRET || 'default_secret',
    webhookURL: process.env.WOOVI_WEBHOOK_URL || 'http://localhost:4000/api/woovi-webhook'
};

console.log('üîß Configura√ß√£o Woovi carregada:');
console.log('üìç Base URL:', WOOVI_CONFIG.baseURL);
console.log('üîë App ID (Produ√ß√£o):', WOOVI_CONFIG.appId ? 'Configurado ‚úÖ' : 'N√ÉO CONFIGURADO ‚ùå');
console.log('üß™ App ID (Sandbox):', WOOVI_CONFIG.sandboxAppId ? 'Configurado ‚úÖ' : 'N√ÉO CONFIGURADO ‚ùå');
console.log('üîê Webhook Secret:', WOOVI_CONFIG.webhookSecret !== 'default_secret' ? 'Configurado ‚úÖ' : 'Usando padr√£o ‚ö†Ô∏è');
console.log('üåê Webhook URL:', WOOVI_CONFIG.webhookURL);
if (WOOVI_CONFIG.webhookURL.includes('localhost')) {
    console.log('‚ö†Ô∏è  ATEN√á√ÉO: Webhook configurado para localhost - n√£o funcionar√° em produ√ß√£o!');
    console.log('üí° Para testar webhooks, configure WOOVI_WEBHOOK_URL com uma URL p√∫blica (ex: ngrok)');
}

// Fun√ß√£o para criar cobran√ßa PIX
async function createPixCharge(data) {
    try {
        console.log('üöÄ [SERVER] Iniciando cria√ß√£o de cobran√ßa PIX');
        console.log('üì¶ [SERVER] Dados recebidos:', data);
        
        // Determinar qual URL usar baseado no par√¢metro useSandbox
        const apiURL = data.useSandbox ? WOOVI_CONFIG.sandboxURL : WOOVI_CONFIG.baseURL;
        console.log('üåê [SERVER] Modo:', data.useSandbox ? 'SANDBOX' : 'PRODU√á√ÉO');
        console.log('üîó [SERVER] URL selecionada:', apiURL);
        
        const chargeData = {
            correlationID: data.correlationID || `pedido-${Date.now()}-${Math.random().toString(36).substr(2, 4)}`, // ID √∫nico
            value: data.value, // valor em centavos
            comment: data.comment || "Pagamento de campanha publicit√°ria",
            expiresIn: data.expiresIn || 900, // usar expiresIn fornecido ou padr√£o de 15 minutos
            webhook: {
                url: WOOVI_CONFIG.webhookURL
            }
        };
        
        // Adicionar customer se fornecido
        if (data.customerName || data.customerPhone || data.customerEmail || data.customerTaxID) {
            chargeData.customer = {};
            if (data.customerName) chargeData.customer.name = data.customerName;
            if (data.customerTaxID) chargeData.customer.taxID = data.customerTaxID;
            if (data.customerEmail) chargeData.customer.email = data.customerEmail;
            if (data.customerPhone) chargeData.customer.phone = data.customerPhone;
        }
        
        // Adicionar additionalInfo se fornecido
        if (data.additionalInfo) {
            chargeData.additionalInfo = data.additionalInfo;
        }
        
        // Determinar qual App ID usar baseado no ambiente
        const appId = data.useSandbox ? WOOVI_CONFIG.sandboxAppId : WOOVI_CONFIG.appId;
        
        console.log('üìã [SERVER] Dados da cobran√ßa preparados:', JSON.stringify(chargeData, null, 2));
        console.log('üåê [SERVER] URL da API:', `${apiURL}/api/v1/charge`);
        console.log('üß™ [SERVER] Ambiente:', data.useSandbox ? 'Sandbox' : 'Produ√ß√£o');
        console.log('üîë [SERVER] App ID header:', appId ? 'Presente' : 'AUSENTE');
        console.log('üì§ [SERVER] Enviando requisi√ß√£o para Woovi...');

        const response = await axios.post(
            `${apiURL}/api/v1/charge`,
            chargeData,
            {
                headers: {
                    'Authorization': appId,
                    'Content-Type': 'application/json'
                },
                timeout: 30000 // 30 segundos
            }
        );
        
        console.log('‚úÖ [SERVER] Resposta da API Woovi recebida:');
        console.log('üìä [SERVER] Status:', response.status);
        console.log('üì¶ [SERVER] Dados:', response.data);

        // Salvar dados da transa√ß√£o pendente para valida√ß√£o posterior
        const transactionData = {
            correlationID: chargeData.correlationID,
            value: chargeData.value,
            comment: chargeData.comment,
            createdAt: new Date().toISOString(),
            customer: chargeData.customer,
            additionalInfo: chargeData.additionalInfo,
            useSandbox: data.useSandbox,
            originalData: data
        };
        
        pendingTransactions.set(chargeData.correlationID, transactionData);
        logTransactionAudit('TRANSACTION_CREATED', chargeData.correlationID, {
            value: chargeData.value,
            comment: chargeData.comment,
            useSandbox: data.useSandbox
        });
        
        console.log(`üíæ [SERVER] Transa√ß√£o salva como pendente: ${chargeData.correlationID}`);

        return response.data;
    } catch (error) {
        console.error('‚ùå [SERVER] Erro ao criar cobran√ßa PIX:');
        console.error('üìÑ [SERVER] Mensagem:', error.message);
        console.error('üìä [SERVER] Status:', error.response?.status);
        console.error('üìã [SERVER] Headers da resposta:', JSON.stringify(error.response?.headers, null, 2));
        console.error('üì¶ [SERVER] Dados do erro:', JSON.stringify(error.response?.data, null, 2));
        console.error('üîó [SERVER] URL da requisi√ß√£o:', error.config?.url);
        console.error('üì§ [SERVER] Dados enviados:', JSON.stringify(error.config?.data, null, 2));
        console.error('üîç [SERVER] Erro completo:', error);
        
        // Tratamento espec√≠fico baseado no status da resposta
        let errorMessage = 'Erro desconhecido ao criar cobran√ßa PIX';
        
        if (error.response) {
            switch (error.response.status) {
                case 400:
                    errorMessage = `Dados inv√°lidos: ${error.response.data?.message || 'Verifique os campos obrigat√≥rios (value e correlationID)'}`;
                    break;
                case 401:
                    errorMessage = 'Token de autoriza√ß√£o inv√°lido ou expirado - verifique o token Woovi';
                    break;
                case 403:
                    errorMessage = 'Acesso negado - verifique as permiss√µes da API Woovi';
                    break;
                case 404:
                    errorMessage = 'Endpoint n√£o encontrado - verifique a URL da API';
                    break;
                case 422:
                    errorMessage = `Erro de valida√ß√£o: ${error.response.data?.message || 'Dados n√£o process√°veis pela API'}`;
                    break;
                case 500:
                    errorMessage = 'Erro interno do servidor Woovi - tente novamente mais tarde';
                    break;
                default:
                    errorMessage = `Erro HTTP ${error.response.status}: ${error.response.data?.message || error.message}`;
            }
        } else if (error.request) {
            errorMessage = 'N√£o foi poss√≠vel conectar com a API Woovi - verifique sua conex√£o com a internet';
        }
        
        throw new Error(errorMessage);
    }
}

// Fun√ß√£o para validar webhook
function validateWebhookSignature(payload, signature) {
    const hmac = crypto.createHmac('sha256', WOOVI_CONFIG.webhookSecret);
    hmac.update(payload);
    const expectedSignature = hmac.digest('hex');
    return signature === expectedSignature;
}



// Armazenar pagamentos processados em mem√≥ria (em produ√ß√£o, usar banco de dados)
const processedPayments = new Map();

// Armazenar transa√ß√µes pendentes (dados salvos na cria√ß√£o)
const pendingTransactions = new Map();

// Sistema de logs de auditoria
const transactionLogs = [];

// Fun√ß√£o para registrar logs de auditoria
function logTransactionAudit(action, correlationID, data = {}) {
    const logEntry = {
        timestamp: new Date().toISOString(),
        action,
        correlationID,
        data,
        id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 4)}`
    };
    transactionLogs.push(logEntry);
    console.log(`üìã [AUDIT] ${action} - ${correlationID}:`, data);
    
    // Manter apenas os √∫ltimos 1000 logs
    if (transactionLogs.length > 1000) {
        transactionLogs.shift();
    }
}

// Rota para webhook da Woovi
app.post('/api/woovi-webhook', (req, res) => {
    try {
        const signature = req.headers['x-webhook-signature'];
        const payload = JSON.stringify(req.body);
        
        // Validar assinatura do webhook
        if (!validateWebhookSignature(payload, signature)) {
            console.log('Assinatura do webhook inv√°lida');
            return res.status(401).json({ error: 'Assinatura inv√°lida' });
        }

        const { event, charge } = req.body;
        
        console.log('üîî [WEBHOOK] Webhook recebido:', event, charge?.correlationID);
        logTransactionAudit('WEBHOOK_RECEIVED', charge?.correlationID, { event, charge });
        
        // Processar diferentes tipos de eventos
        switch (event) {
            case 'OPENPIX:CHARGE_COMPLETED':
            case 'woovi:TRANSACTION_RECEIVED':
                console.log(`üí∞ [WEBHOOK] Pagamento confirmado para: ${charge.correlationID}`);
                
                // Validar se a transa√ß√£o existe nas pendentes
                const pendingTransaction = pendingTransactions.get(charge.correlationID);
                if (!pendingTransaction) {
                    console.error(`‚ùå [WEBHOOK] Transa√ß√£o n√£o encontrada nas pendentes: ${charge.correlationID}`);
                    logTransactionAudit('VALIDATION_FAILED', charge.correlationID, {
                        reason: 'Transaction not found in pending',
                        receivedValue: charge.value
                    });
                    return res.status(400).json({ error: 'Transa√ß√£o n√£o encontrada' });
                }
                
                // Validar valor da transa√ß√£o
                if (pendingTransaction.value !== charge.value) {
                    console.error(`‚ùå [WEBHOOK] Valor n√£o confere para ${charge.correlationID}:`);
                    console.error(`   Esperado: ${pendingTransaction.value}, Recebido: ${charge.value}`);
                    logTransactionAudit('VALIDATION_FAILED', charge.correlationID, {
                        reason: 'Value mismatch',
                        expectedValue: pendingTransaction.value,
                        receivedValue: charge.value
                    });
                    return res.status(400).json({ error: 'Valor da transa√ß√£o n√£o confere' });
                }
                
                console.log(`‚úÖ [WEBHOOK] Valida√ß√£o passou para: ${charge.correlationID}`);
                
                // Armazenar o pagamento como processado
                processedPayments.set(charge.correlationID, {
                    status: 'COMPLETED',
                    paidAt: new Date().toISOString(),
                    value: charge.value,
                    event: event,
                    validatedAt: new Date().toISOString(),
                    pendingData: pendingTransaction
                });
                
                // Remover da lista de pendentes
                pendingTransactions.delete(charge.correlationID);
                
                logTransactionAudit('PAYMENT_VALIDATED', charge.correlationID, {
                    value: charge.value,
                    event: event
                });
                
                console.log(`üíæ [WEBHOOK] Pagamento validado e armazenado: ${charge.correlationID}`);
                break;
            case 'OPENPIX:CHARGE_EXPIRED':
                console.log(`Cobran√ßa expirada: ${charge.correlationID}`);
                processedPayments.set(charge.correlationID, {
                    status: 'EXPIRED',
                    expiredAt: new Date().toISOString()
                });
                break;
            default:
                console.log(`Evento n√£o tratado: ${event}`);
        }
        
        res.status(200).json({ received: true });
    } catch (error) {
        console.error('Erro no webhook:', error);
        res.status(500).json({ error: 'Erro interno' });
    }
});

// Rota para verificar status do pagamento (polling + consulta direta √† API)
app.get('/api/payment-status/:correlationID', async (req, res) => {
    const { correlationID } = req.params;
    
    // Primeiro verifica se j√° foi processado localmente
    const localPayment = processedPayments.get(correlationID);
    if (localPayment) {
        return res.json({ 
            success: true, 
            status: localPayment.status,
            data: localPayment
        });
    }
    
    // Se n√£o foi processado, consulta diretamente a API da Woovi
    const pendingTransaction = pendingTransactions.get(correlationID);
    if (!pendingTransaction) {
        return res.json({ 
            success: false, 
            status: 'NOT_FOUND',
            message: 'Transa√ß√£o n√£o encontrada'
        });
    }
    
    try {
        // Determinar qual API usar baseado no ambiente da transa√ß√£o
        const apiURL = pendingTransaction.useSandbox ? WOOVI_CONFIG.sandboxURL : WOOVI_CONFIG.baseURL;
        const appId = pendingTransaction.useSandbox ? WOOVI_CONFIG.sandboxAppId : WOOVI_CONFIG.appId;
        
        console.log(`üîç [POLLING] Consultando status na API Woovi: ${correlationID}`);
        
        const response = await axios.get(
            `${apiURL}/api/v1/charge/${correlationID}`,
            {
                headers: {
                    'Authorization': appId,
                    'Content-Type': 'application/json'
                },
                timeout: 10000
            }
        );
        
        const charge = response.data.charge;
        console.log(`üìä [POLLING] Status recebido: ${charge.status} para ${correlationID}`);
        
        // Se o pagamento foi completado, processar localmente
        if (charge.status === 'COMPLETED') {
            console.log(`‚úÖ [POLLING] Pagamento confirmado via API: ${correlationID}`);
            
            // Validar valor
            if (pendingTransaction.value !== charge.value) {
                console.error(`‚ùå [POLLING] Valor n√£o confere para ${correlationID}:`);
                console.error(`   Esperado: ${pendingTransaction.value}, Recebido: ${charge.value}`);
                logTransactionAudit('VALIDATION_FAILED', correlationID, {
                    reason: 'Value mismatch via polling',
                    expectedValue: pendingTransaction.value,
                    receivedValue: charge.value
                });
                return res.json({ 
                    success: false, 
                    status: 'VALIDATION_ERROR',
                    message: 'Valor da transa√ß√£o n√£o confere'
                });
            }
            
            // Armazenar como processado
            const processedPayment = {
                status: 'COMPLETED',
                paidAt: charge.paidAt || new Date().toISOString(),
                value: charge.value,
                event: 'POLLING_CONFIRMED',
                validatedAt: new Date().toISOString(),
                pendingData: pendingTransaction,
                chargeData: charge
            };
            
            processedPayments.set(correlationID, processedPayment);
            pendingTransactions.delete(correlationID);
            
            logTransactionAudit('PAYMENT_VALIDATED', correlationID, {
                value: charge.value,
                method: 'polling',
                paidAt: charge.paidAt
            });
            
            console.log(`üíæ [POLLING] Pagamento validado e armazenado: ${correlationID}`);
            
            return res.json({ 
                success: true, 
                status: 'COMPLETED',
                data: processedPayment
            });
        } else if (charge.status === 'EXPIRED') {
            console.log(`‚è∞ [POLLING] Cobran√ßa expirada: ${correlationID}`);
            
            const expiredPayment = {
                status: 'EXPIRED',
                expiredAt: charge.expiredAt || new Date().toISOString(),
                chargeData: charge
            };
            
            processedPayments.set(correlationID, expiredPayment);
            pendingTransactions.delete(correlationID);
            
            logTransactionAudit('PAYMENT_EXPIRED', correlationID, {
                expiredAt: charge.expiredAt,
                method: 'polling'
            });
            
            return res.json({ 
                success: true, 
                status: 'EXPIRED',
                data: expiredPayment
            });
        } else {
            // Ainda pendente
            return res.json({ 
                success: false, 
                status: 'PENDING',
                message: 'Pagamento ainda pendente',
                chargeStatus: charge.status
            });
        }
        
    } catch (error) {
        console.error(`‚ùå [POLLING] Erro ao consultar API Woovi para ${correlationID}:`, error.message);
        
        // Se der erro na consulta, retorna como pendente
        return res.json({ 
            success: false, 
            status: 'PENDING',
            message: 'Erro ao verificar status - tentando novamente...',
            error: error.message
        });
    }
});

// Rota para visualizar logs de auditoria
app.get('/api/transaction-logs', (req, res) => {
    const { limit = 50, correlationID } = req.query;
    
    let logs = transactionLogs;
    
    // Filtrar por correlationID se fornecido
    if (correlationID) {
        logs = logs.filter(log => log.correlationID === correlationID);
    }
    
    // Limitar quantidade de logs
    const limitedLogs = logs.slice(-parseInt(limit));
    
    res.json({
        success: true,
        logs: limitedLogs,
        total: logs.length
    });
});

// Rota para estat√≠sticas das transa√ß√µes
app.get('/api/transaction-stats', (req, res) => {
    const stats = {
        pendingTransactions: pendingTransactions.size,
        processedPayments: processedPayments.size,
        totalLogs: transactionLogs.length,
        recentActivity: transactionLogs.slice(-10)
    };
    
    res.json({
        success: true,
        stats
    });
});

// Rota 404 - deve ser a √∫ltima rota
app.use('*', (req, res) => {
    res.status(404).json({ error: 'Rota n√£o encontrada' });
});

app.listen(PORT, () => {
    console.log(`üöÄ Servidor rodando em http://localhost:${PORT}`);
    console.log(`üìÅ Arquivos est√°ticos servidos de: ${path.join(__dirname, 'public')}`);
    console.log(`üì§ Uploads salvos em: ${path.join(__dirname, 'uploads')}`);
    console.log(`üí≥ Woovi PIX integrado e funcionando`);
    
    // Testar conectividade com Evolution API
    testEvolutionAPI();
});

module.exports = app;